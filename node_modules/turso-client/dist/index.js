class F{baseUrl;apiKey;regionUrl;constructor(j){this.baseUrl="https://api.turso.tech/",this.regionUrl="https://region.turso.io/",this.apiKey=j.apiKey}async request(j){let x=new URL(`${j.region?this.regionUrl:this.baseUrl}${j.path}`);if(j.query)Object.entries(j.query).forEach(([D,E])=>x.searchParams.append(D,E));let B={method:j.method,headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}};if(j.body)B.body=JSON.stringify(j.body);let C=await fetch(x.toString(),B);if(!C.ok)throw new Error(`Request failed with status ${C.status}`);return C.json()}apiTokens={create:async(j)=>{return this.request({path:`v1/auth/api-tokens/${j}`,method:"POST"})},validate:async()=>{return this.request({path:"v1/auth/validate",method:"GET"})},list:async()=>{return this.request({path:"v1/auth/api-tokens",method:"GET"})},revoke:async(j)=>{return this.request({path:`v1/auth/api-tokens/${j}`,method:"DELETE"})}};databases={list:async(j,x,B)=>{let C={};if(x)C.group=x;if(B)C.schema=B;return this.request({path:`v1/organizations/${j}/databases`,method:"GET",query:C})},create:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases`,method:"POST",body:x})},retrieve:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases/${x}`,method:"GET"})},retrieveConfiguration:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases/${x}/configuration`,method:"GET"})},delete:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases/${x}`,method:"DELETE"})},createToken:async(j,x,B,C)=>{let D={};if(B){if(B.expiration)D.expiration=B.expiration;if(B.authorization)D.authorization=B.authorization}return this.request({path:`v1/organizations/${j}/databases/${x}/auth/tokens`,method:"POST",query:Object.keys(D).length>0?D:null,body:C})},invalidateToken:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases/${x}/auth/rotate`,method:"POST"})},listInstances:async(j,x)=>{return this.request({path:`v1/organizations/${j}/databases/${x}/instances`,method:"GET"})}};locations={list:async()=>{return this.request({path:"v1/locations",method:"GET"})},closest:async()=>{return this.request({path:"",method:"GET",region:!0})}};organizations={list:async()=>{return this.request({path:"v1/organizations",method:"GET"})}};members={list:async(j)=>{return this.request({path:`v1/organizations/${j}/members`,method:"GET"})},add:async(j,x)=>{return this.request({path:`v1/organizations/${j}/members`,method:"POST",body:x})},remove:async(j,x)=>{return this.request({path:`v1/organizations/${j}/members/${x}`,method:"DELETE"})}}}export{F as TursoClient};
